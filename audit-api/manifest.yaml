apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: audit-api
    cluster: audit-api
    app.kubernetes.io/component: audit-api
    app.kubernetes.io/part-of: api
  annotations:
    moniker.spinnaker.io/cluster: audit-api
  name: audit-api
  namespace: {{ .Release.Namespace }}
spec:
  replicas: {{ .Values.minreplicas | default "1" }}
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app: audit-api
  template:
    metadata:
      labels:
        app: audit-api
        cluster: audit-api
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8010"
        prometheus.io/path: "/__manage/prometheus"
        iam.amazonaws.com/role: k8s_audit_{{ .Release.Namespace }}
    spec:
      volumes:
        - name: env-secrets
          secret:
            secretName: secrets
      containers:
        - name: audit-api
          image: 'eu.gcr.io/example-cloud-infrastructure/audit-api'
          volumeMounts:
            - name: env-secrets
              mountPath: "/secrets"
              readOnly: true
          envFrom:
            - configMapRef:
                name: global
          env:
            - name: GO_CONFIG_ENABLED
              value: "true"
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: APPLICATION_PROFILE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: MINRAMPERCENTAGE
              value: "50"
            - name: JAVA_OPTS
              value: "-XX:MaxRAMPercentage=75 -Djava.security.egd=file:/dev/./urandom"
          resources:
            limits:
              memory: 512Mi
            requests:
              cpu: 200m
              memory: 512Mi
          ports:
            - containerPort: 8010
              name: service-port
          readinessProbe:
            httpGet:
              path: /__manage/health
              port: 8010
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 3
          livenessProbe:
            httpGet:
              path: /__manage/live
              port: 8010
            initialDelaySeconds: 60
            periodSeconds: 20
            failureThreshold: 8
            timeoutSeconds: 3
      terminationGracePeriodSeconds: 90
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: audit-api
    cluster: audit-api
  annotations:
    moniker.spinnaker.io/cluster: audit-api
  name: audit-api
  namespace: {{ .Release.Namespace }}
spec:
  ports:
    - port: 80
      protocol: TCP
      targetPort: 8010
  selector:
    app: audit-api
    cluster: audit-api
---
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: audit-api
  namespace: {{ .Release.Namespace }}
  labels:
    app: audit-api
    cluster: audit-api
  annotations:
    moniker.spinnaker.io/cluster: audit-api
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: audit-api
  minReplicas: {{ .Values.minreplicas | default "1" }}
  maxReplicas: 3
  metrics:
    - type: Resource
      resource:
        name: cpu
        targetAverageUtilization: 350
    - type: Pods
      pods:
        metricName: tomcat_threads_busy_threads
        targetAverageValue: "100"
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: audit-api
  namespace: {{ .Release.Namespace }}
  labels:
    app: audit-api
    cluster: audit-api
  annotations:
    moniker.spinnaker.io/cluster: audit-api
    ingress.kubernetes.io/rewrite-target: /
    kubernetes.io/ingress.class: haproxy
spec:
  rules:
  - host: "*.lb-internal-{{ .Release.Namespace }}.example.com"
    http:
      paths:
      - path: /audit-api/
        backend:
          serviceName: audit-api
          servicePort: 80
